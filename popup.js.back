// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

var m = [20, 20, 20, 20],
  w = 1280 - m[1] - m[3],
  h = 600 - m[0] - m[2],
  i = 0;

var tree = d3.layout.tree()
  .size([h, w]);

var diagonal = d3.svg.diagonal()
  .projection(function (d) { return [d.y, d.x]; });

var vis = d3.select("#body").append("svg:svg")
  .attr("width", w + m[1] + m[3])
  .attr("height", h + m[0] + m[2])
  .append("svg:g")
  .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

var bg = chrome.extension.getBackgroundPage();
var data = bg.data;
var toggle = bg.toggle;

function update(source) {
  var duration = d3.event && d3.event.altKey ? 5000 : 500;

  // Compute the new tree layout.
  var nodes = tree.nodes(data).reverse();

  // Normalize for fixed-depth.
  nodes.forEach(function (d) { d.y = d.depth * 150; });

  // Update the nodes…
  var node = vis.selectAll("g.node")
    .data(nodes, function (d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("svg:g")
    .attr("class", "node")
    .attr("transform", function (d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
    .on("click", function(d) {
      toggle(d);
      update(d);
      toggle(data);
      update(data);
      toggle(data);
      updata(data);
    })
    .on("contextmenu", function (d) { 
      chrome.tabs.get(d.tabid, function(tab) {
        chrome.tabs.update(tab.id, {active: true}, function () {
          chrome.windows.update(tab.windowId, {focused: true});
        });
      });
    });

  nodeEnter.append("svg:circle")
    .attr("r", 1e-6)
    .style("fill", function (d) { return d._children ? "lightsteelblue" : "#fff"; });

  // TODO: anchor
  nodeEnter.append("svg:text")
    .attr("x", function (d) { 
      return d.children || d._children ? -10 : 10;
    })
    .attr("dy", function(d) {
      return d.depth % 2 == 0 ? "10pt": "-10pt";
    })
    .attr("text-anchor", function (d) { 
      return d.children || d._children ? "end" : "start";
    })
    .text(function (d) { return d.name; })
    .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node
    .transition()
    .duration(duration)
    .attr("transform", function (d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
    .attr("r", 1)
    .style("fill", function (d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
    .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit()
    .transition()
    .duration(duration)
    .attr("transform", function (d) { return "translate(" + source.y + "," + source.x + ")"; })
    .remove();

  nodeExit.select("circle")
    .attr("r", 1e-6);

  nodeExit.select("text")
    .style("fill-opacity", 1e-6);

  // Update the links…
  var link = vis.selectAll("path.link")
    .data(tree.links(nodes), function (d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
    .attr("class", "link")
    .attr("d", function (d) {
      var o = { x: source.x0, y: source.y0 };
      return diagonal({ source: o, target: o });
    })
    .transition()
    .duration(duration)
    .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
    .duration(duration)
    .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit()
    .transition()
    .duration(duration)
    .attr("d", function (d) {
      var o = { x: source.x, y: source.y };
      return diagonal({ source: o, target: o });
    })
    .remove();

  // Stash the old positions for transition.
  nodes.forEach(function (d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

var port = chrome.extension.connect({
  name: "Sample Communication"
});
port.postMessage("Hi BackGround");
port.onMessage.addListener(function(msg) {
  console.log(port);
  console.log(msg);
});

chrome.runtime.onMessage.addListener(
  function(request, sender, sendResponse) {
    if (!data)
      return;
    console.log(request);
    if (request.type === "update") {
      update(data);
    }
});

if (data._children)
  toggle(data);
update(data);